/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2018_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.network.v2018_05_01.implementation.ExpressRouteCrossConnectionInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2018_05_01.implementation.NetworkManager;
import java.util.Map;
import java.util.List;
import com.microsoft.azure.management.network.v2018_05_01.implementation.ExpressRouteCrossConnectionPeeringInner;

/**
 * Type representing ExpressRouteCrossConnection.
 */
public interface ExpressRouteCrossConnection extends HasInner<ExpressRouteCrossConnectionInner>, Indexable, Updatable<ExpressRouteCrossConnection.Update>, Refreshable<ExpressRouteCrossConnection>, HasManager<NetworkManager> {
    /**
     * @return the bandwidthInMbps value.
     */
    Integer bandwidthInMbps();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the expressRouteCircuit value.
     */
    ExpressRouteCircuitReference expressRouteCircuit();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the peeringLocation value.
     */
    String peeringLocation();

    /**
     * @return the peerings value.
     */
    List<ExpressRouteCrossConnectionPeering> peerings();

    /**
     * @return the primaryAzurePort value.
     */
    String primaryAzurePort();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the secondaryAzurePort value.
     */
    String secondaryAzurePort();

    /**
     * @return the serviceProviderNotes value.
     */
    String serviceProviderNotes();

    /**
     * @return the serviceProviderProvisioningState value.
     */
    ServiceProviderProvisioningState serviceProviderProvisioningState();

    /**
     * @return the sTag value.
     */
    Integer sTag();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ExpressRouteCrossConnection definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroupName, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ExpressRouteCrossConnection definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ExpressRouteCrossConnection definition.
         */
        interface Blank extends WithResourceGroupName {
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify ResourceGroupName.
         */
        interface WithResourceGroupName {
           /**
            * Specifies resourceGroupName.
            */
            WithCreate withResourceGroupName(String resourceGroupName);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify BandwidthInMbps.
         */
        interface WithBandwidthInMbps {
            /**
             * Specifies bandwidthInMbps.
             */
            WithCreate withBandwidthInMbps(Integer bandwidthInMbps);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify ExpressRouteCircuit.
         */
        interface WithExpressRouteCircuit {
            /**
             * Specifies expressRouteCircuit.
             */
            WithCreate withExpressRouteCircuit(ExpressRouteCircuitReference expressRouteCircuit);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify Id.
         */
        interface WithId {
            /**
             * Specifies id.
             */
            WithCreate withId(String id);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify PeeringLocation.
         */
        interface WithPeeringLocation {
            /**
             * Specifies peeringLocation.
             */
            WithCreate withPeeringLocation(String peeringLocation);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify Peerings.
         */
        interface WithPeerings {
            /**
             * Specifies peerings.
             */
            WithCreate withPeerings(List<ExpressRouteCrossConnectionPeeringInner> peerings);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify ServiceProviderNotes.
         */
        interface WithServiceProviderNotes {
            /**
             * Specifies serviceProviderNotes.
             */
            WithCreate withServiceProviderNotes(String serviceProviderNotes);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify ServiceProviderProvisioningState.
         */
        interface WithServiceProviderProvisioningState {
            /**
             * Specifies serviceProviderProvisioningState.
             */
            WithCreate withServiceProviderProvisioningState(ServiceProviderProvisioningState serviceProviderProvisioningState);
        }

        /**
         * The stage of the expressroutecrossconnection definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ExpressRouteCrossConnection>, DefinitionStages.WithBandwidthInMbps, DefinitionStages.WithExpressRouteCircuit, DefinitionStages.WithId, DefinitionStages.WithLocation, DefinitionStages.WithPeeringLocation, DefinitionStages.WithPeerings, DefinitionStages.WithServiceProviderNotes, DefinitionStages.WithServiceProviderProvisioningState, DefinitionStages.WithTags {
        }
    }
    /**
     * The template for a ExpressRouteCrossConnection update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ExpressRouteCrossConnection> {
    }

    /**
     * Grouping of ExpressRouteCrossConnection update stages.
     */
    interface UpdateStages {
    }
}
