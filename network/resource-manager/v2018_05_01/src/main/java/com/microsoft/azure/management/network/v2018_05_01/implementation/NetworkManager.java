/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2018_05_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.network.v2018_05_01.ExpressRouteCrossConnectionPeeringsOperations;
import com.microsoft.azure.management.network.v2018_05_01.ArpTables;
import com.microsoft.azure.management.network.v2018_05_01.ExpressRouteCrossConnectionPeerings;
import com.microsoft.azure.management.network.v2018_05_01.RouteTables;
import com.microsoft.azure.management.network.v2018_05_01.ExpressRouteCrossConnections;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Network resource management.
 */
public final class NetworkManager extends ManagerCore<NetworkManager, NetworkManagementClientImpl> {
    private ExpressRouteCrossConnectionPeeringsOperations expressRouteCrossConnectionPeeringsOperations;
    private ArpTables arpTables;
    private ExpressRouteCrossConnectionPeerings expressRouteCrossConnectionPeerings;
    private RouteTables routeTables;
    private ExpressRouteCrossConnections expressRouteCrossConnections;
    /**
    * Get a Configurable instance that can be used to create NetworkManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new NetworkManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of NetworkManager that exposes Network resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the NetworkManager
    */
    public static NetworkManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new NetworkManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of NetworkManager that exposes Network resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the NetworkManager
    */
    public static NetworkManager authenticate(RestClient restClient, String subscriptionId) {
        return new NetworkManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of NetworkManager that exposes Network management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Network management API entry points that work across subscriptions
        */
        NetworkManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage ExpressRouteCrossConnectionPeeringsOperations.
     */
    public ExpressRouteCrossConnectionPeeringsOperations expressRouteCrossConnectionPeeringsOperations() {
        if (this.expressRouteCrossConnectionPeeringsOperations == null) {
            this.expressRouteCrossConnectionPeeringsOperations = new ExpressRouteCrossConnectionPeeringsOperationsImpl(this);
        }
        return this.expressRouteCrossConnectionPeeringsOperations;
    }

    /**
     * @return Entry point to manage ArpTables.
     */
    public ArpTables arpTables() {
        if (this.arpTables == null) {
            this.arpTables = new ArpTablesImpl(this);
        }
        return this.arpTables;
    }

    /**
     * @return Entry point to manage ExpressRouteCrossConnectionPeerings.
     */
    public ExpressRouteCrossConnectionPeerings expressRouteCrossConnectionPeerings() {
        if (this.expressRouteCrossConnectionPeerings == null) {
            this.expressRouteCrossConnectionPeerings = new ExpressRouteCrossConnectionPeeringsImpl(this);
        }
        return this.expressRouteCrossConnectionPeerings;
    }

    /**
     * @return Entry point to manage RouteTables.
     */
    public RouteTables routeTables() {
        if (this.routeTables == null) {
            this.routeTables = new RouteTablesImpl(this);
        }
        return this.routeTables;
    }

    /**
     * @return Entry point to manage ExpressRouteCrossConnections.
     */
    public ExpressRouteCrossConnections expressRouteCrossConnections() {
        if (this.expressRouteCrossConnections == null) {
            this.expressRouteCrossConnections = new ExpressRouteCrossConnectionsImpl(this);
        }
        return this.expressRouteCrossConnections;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public NetworkManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return NetworkManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private NetworkManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new NetworkManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
