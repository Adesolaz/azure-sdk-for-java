/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.network.v2018_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.network.v2018_05_01.ExpressRouteCrossConnections;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.network.v2018_05_01.ExpressRouteCrossConnection;
import com.microsoft.azure.management.network.v2018_05_01.ExpressRouteCrossConnectionPeerings;
import com.microsoft.azure.management.network.v2018_05_01.ExpressRouteCrossConnectionPeeringsOperations;

class ExpressRouteCrossConnectionsImpl extends WrapperImpl<ExpressRouteCrossConnectionsInner> implements ExpressRouteCrossConnections {
    private PagedListConverter<ExpressRouteCrossConnectionInner, ExpressRouteCrossConnection> converter;
    private final NetworkManager manager;

    ExpressRouteCrossConnectionsImpl(NetworkManager manager) {
        super(manager.inner().expressRouteCrossConnections());
        this.manager = manager;
        this.converter = new PagedListConverter<ExpressRouteCrossConnectionInner, ExpressRouteCrossConnection>() {
            @Override
            public Observable<ExpressRouteCrossConnection> typeConvertAsync(ExpressRouteCrossConnectionInner inner) {
                return Observable.just((ExpressRouteCrossConnection) wrapModel(inner));
            }
        };
    }

    @Override
    public ExpressRouteCrossConnectionPeerings peerings() {
        ExpressRouteCrossConnectionPeerings accessor = this.manager().expressRouteCrossConnectionPeerings();
        return accessor;
    }

    @Override
    public ExpressRouteCrossConnectionPeeringsOperations peeringsOperation() {
        ExpressRouteCrossConnectionPeeringsOperations accessor = this.manager().expressRouteCrossConnectionPeeringsOperations();
        return accessor;
    }

    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public ExpressRouteCrossConnectionImpl define(String name) {
        return wrapModel(name);
    }

    private ExpressRouteCrossConnectionImpl wrapModel(ExpressRouteCrossConnectionInner inner) {
        return  new ExpressRouteCrossConnectionImpl(inner, manager());
    }

    private ExpressRouteCrossConnectionImpl wrapModel(String name) {
        return new ExpressRouteCrossConnectionImpl(name, this.manager());
    }

    @Override
    public PagedList<ExpressRouteCrossConnection> list() {
        ExpressRouteCrossConnectionsInner client = this.inner();
        return converter.convert(client.list());
    }

    private Observable<Page<ExpressRouteCrossConnectionInner>> listNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        ExpressRouteCrossConnectionsInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<ExpressRouteCrossConnectionInner>, Observable<Page<ExpressRouteCrossConnectionInner>>>() {
            @Override
            public Observable<Page<ExpressRouteCrossConnectionInner>> call(Page<ExpressRouteCrossConnectionInner> page) {
                return Observable.just(page).concatWith(listNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ExpressRouteCrossConnection> listAsync() {
        ExpressRouteCrossConnectionsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<ExpressRouteCrossConnectionInner>, Observable<Page<ExpressRouteCrossConnectionInner>>>() {
            @Override
            public Observable<Page<ExpressRouteCrossConnectionInner>> call(Page<ExpressRouteCrossConnectionInner> page) {
                return listNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ExpressRouteCrossConnectionInner>, Iterable<ExpressRouteCrossConnectionInner>>() {
            @Override
            public Iterable<ExpressRouteCrossConnectionInner> call(Page<ExpressRouteCrossConnectionInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ExpressRouteCrossConnectionInner, ExpressRouteCrossConnection>() {
            @Override
            public ExpressRouteCrossConnection call(ExpressRouteCrossConnectionInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public PagedList<ExpressRouteCrossConnection> listByResourceGroup(String resourceGroupName) {
        ExpressRouteCrossConnectionsInner client = this.inner();
        return converter.convert(client.listByResourceGroup(resourceGroupName));
    }

    private Observable<Page<ExpressRouteCrossConnectionInner>> listByResourceGroupNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        ExpressRouteCrossConnectionsInner client = this.inner();
        return client.listByResourceGroupNextAsync(nextLink)
        .flatMap(new Func1<Page<ExpressRouteCrossConnectionInner>, Observable<Page<ExpressRouteCrossConnectionInner>>>() {
            @Override
            public Observable<Page<ExpressRouteCrossConnectionInner>> call(Page<ExpressRouteCrossConnectionInner> page) {
                return Observable.just(page).concatWith(listByResourceGroupNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<ExpressRouteCrossConnection> listByResourceGroupAsync(String resourceGroupName) {
        ExpressRouteCrossConnectionsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<ExpressRouteCrossConnectionInner>, Observable<Page<ExpressRouteCrossConnectionInner>>>() {
            @Override
            public Observable<Page<ExpressRouteCrossConnectionInner>> call(Page<ExpressRouteCrossConnectionInner> page) {
                return listByResourceGroupNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<ExpressRouteCrossConnectionInner>, Iterable<ExpressRouteCrossConnectionInner>>() {
            @Override
            public Iterable<ExpressRouteCrossConnectionInner> call(Page<ExpressRouteCrossConnectionInner> page) {
                return page.items();
            }
       })
        .map(new Func1<ExpressRouteCrossConnectionInner, ExpressRouteCrossConnection>() {
            @Override
            public ExpressRouteCrossConnection call(ExpressRouteCrossConnectionInner inner) {
                return wrapModel(inner);
            }
       });
    }

    private Observable<ExpressRouteCrossConnectionInner> getInnerAsync(String resourceGroupName, String name) {
        ExpressRouteCrossConnectionsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    public ExpressRouteCrossConnection getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupAsync(resourceGroupName, name).toBlocking().last();
    }

    @Override
    public Observable<ExpressRouteCrossConnection> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getInnerAsync(resourceGroupName, name).map(new Func1<ExpressRouteCrossConnectionInner, ExpressRouteCrossConnection> () {
            @Override
            public ExpressRouteCrossConnection call(ExpressRouteCrossConnectionInner innerT) {
                return wrapModel(innerT);
            }
        });
    }

    @Override
    public ServiceFuture<ExpressRouteCrossConnection> getByResourceGroupAsync(String resourceGroupName, String name, ServiceCallback<ExpressRouteCrossConnection> callback) {
        return ServiceFuture.fromBody(getByResourceGroupAsync(resourceGroupName, name), callback);
    }

}
