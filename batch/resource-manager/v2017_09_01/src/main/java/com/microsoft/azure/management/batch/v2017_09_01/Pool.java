/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batch.v2017_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.batch.v2017_09_01.implementation.PoolInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.batch.v2017_09_01.implementation.BatchManager;
import org.joda.time.DateTime;
import java.util.List;

/**
 * Type representing Pool.
 */
public interface Pool extends HasInner<PoolInner>, Indexable, Refreshable<Pool>, Updatable<Pool.Update>, HasManager<BatchManager> {
    /**
     * @return the allocationState value.
     */
    AllocationState allocationState();

    /**
     * @return the allocationStateTransitionTime value.
     */
    DateTime allocationStateTransitionTime();

    /**
     * @return the applicationLicenses value.
     */
    List<String> applicationLicenses();

    /**
     * @return the applicationPackages value.
     */
    List<ApplicationPackageReference> applicationPackages();

    /**
     * @return the autoScaleRun value.
     */
    AutoScaleRun autoScaleRun();

    /**
     * @return the certificates value.
     */
    List<CertificateReference> certificates();

    /**
     * @return the creationTime value.
     */
    DateTime creationTime();

    /**
     * @return the currentDedicatedNodes value.
     */
    Integer currentDedicatedNodes();

    /**
     * @return the currentLowPriorityNodes value.
     */
    Integer currentLowPriorityNodes();

    /**
     * @return the deploymentConfiguration value.
     */
    DeploymentConfiguration deploymentConfiguration();

    /**
     * @return the displayName value.
     */
    String displayName();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the interNodeCommunication value.
     */
    InterNodeCommunicationState interNodeCommunication();

    /**
     * @return the lastModified value.
     */
    DateTime lastModified();

    /**
     * @return the maxTasksPerNode value.
     */
    Integer maxTasksPerNode();

    /**
     * @return the metadata value.
     */
    List<MetadataItem> metadata();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the networkConfiguration value.
     */
    NetworkConfiguration networkConfiguration();

    /**
     * @return the provisioningState value.
     */
    PoolProvisioningState provisioningState();

    /**
     * @return the provisioningStateTransitionTime value.
     */
    DateTime provisioningStateTransitionTime();

    /**
     * @return the resizeOperationStatus value.
     */
    ResizeOperationStatus resizeOperationStatus();

    /**
     * @return the scaleSettings value.
     */
    ScaleSettings scaleSettings();

    /**
     * @return the startTask value.
     */
    StartTask startTask();

    /**
     * @return the taskSchedulingPolicy value.
     */
    TaskSchedulingPolicy taskSchedulingPolicy();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the userAccounts value.
     */
    List<UserAccount> userAccounts();

    /**
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * The entirety of the Pool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithBatchAccount, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Pool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Pool definition.
         */
        interface Blank extends WithBatchAccount {
        }

        /**
         * The stage of the pool definition allowing to specify BatchAccount.
         */
        interface WithBatchAccount {
           /**
            * Specifies resourceGroupName, accountName.
            */
            WithCreate withExistingBatchAccount(String resourceGroupName, String accountName);
        }

        /**
         * The stage of the pool definition allowing to specify ApplicationLicenses.
         */
        interface WithApplicationLicenses {
            /**
             * Specifies applicationLicenses.
             */
            WithCreate withApplicationLicenses(List<String> applicationLicenses);
        }

        /**
         * The stage of the pool definition allowing to specify ApplicationPackages.
         */
        interface WithApplicationPackages {
            /**
             * Specifies applicationPackages.
             */
            WithCreate withApplicationPackages(List<ApplicationPackageReference> applicationPackages);
        }

        /**
         * The stage of the pool definition allowing to specify Certificates.
         */
        interface WithCertificates {
            /**
             * Specifies certificates.
             */
            WithCreate withCertificates(List<CertificateReference> certificates);
        }

        /**
         * The stage of the pool definition allowing to specify DeploymentConfiguration.
         */
        interface WithDeploymentConfiguration {
            /**
             * Specifies deploymentConfiguration.
             */
            WithCreate withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration);
        }

        /**
         * The stage of the pool definition allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the pool definition allowing to specify InterNodeCommunication.
         */
        interface WithInterNodeCommunication {
            /**
             * Specifies interNodeCommunication.
             */
            WithCreate withInterNodeCommunication(InterNodeCommunicationState interNodeCommunication);
        }

        /**
         * The stage of the pool definition allowing to specify MaxTasksPerNode.
         */
        interface WithMaxTasksPerNode {
            /**
             * Specifies maxTasksPerNode.
             */
            WithCreate withMaxTasksPerNode(Integer maxTasksPerNode);
        }

        /**
         * The stage of the pool definition allowing to specify Metadata.
         */
        interface WithMetadata {
            /**
             * Specifies metadata.
             */
            WithCreate withMetadata(List<MetadataItem> metadata);
        }

        /**
         * The stage of the pool definition allowing to specify NetworkConfiguration.
         */
        interface WithNetworkConfiguration {
            /**
             * Specifies networkConfiguration.
             */
            WithCreate withNetworkConfiguration(NetworkConfiguration networkConfiguration);
        }

        /**
         * The stage of the pool definition allowing to specify ScaleSettings.
         */
        interface WithScaleSettings {
            /**
             * Specifies scaleSettings.
             */
            WithCreate withScaleSettings(ScaleSettings scaleSettings);
        }

        /**
         * The stage of the pool definition allowing to specify StartTask.
         */
        interface WithStartTask {
            /**
             * Specifies startTask.
             */
            WithCreate withStartTask(StartTask startTask);
        }

        /**
         * The stage of the pool definition allowing to specify TaskSchedulingPolicy.
         */
        interface WithTaskSchedulingPolicy {
            /**
             * Specifies taskSchedulingPolicy.
             */
            WithCreate withTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy);
        }

        /**
         * The stage of the pool definition allowing to specify UserAccounts.
         */
        interface WithUserAccounts {
            /**
             * Specifies userAccounts.
             */
            WithCreate withUserAccounts(List<UserAccount> userAccounts);
        }

        /**
         * The stage of the pool definition allowing to specify VmSize.
         */
        interface WithVmSize {
            /**
             * Specifies vmSize.
             */
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Pool>, DefinitionStages.WithApplicationLicenses, DefinitionStages.WithApplicationPackages, DefinitionStages.WithCertificates, DefinitionStages.WithDeploymentConfiguration, DefinitionStages.WithDisplayName, DefinitionStages.WithInterNodeCommunication, DefinitionStages.WithMaxTasksPerNode, DefinitionStages.WithMetadata, DefinitionStages.WithNetworkConfiguration, DefinitionStages.WithScaleSettings, DefinitionStages.WithStartTask, DefinitionStages.WithTaskSchedulingPolicy, DefinitionStages.WithUserAccounts, DefinitionStages.WithVmSize {
        }
    }
    /**
     * The template for a Pool update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Pool>, UpdateStages.WithApplicationLicenses, UpdateStages.WithApplicationPackages, UpdateStages.WithCertificates, UpdateStages.WithDeploymentConfiguration, UpdateStages.WithDisplayName, UpdateStages.WithInterNodeCommunication, UpdateStages.WithMaxTasksPerNode, UpdateStages.WithMetadata, UpdateStages.WithNetworkConfiguration, UpdateStages.WithScaleSettings, UpdateStages.WithStartTask, UpdateStages.WithTaskSchedulingPolicy, UpdateStages.WithUserAccounts, UpdateStages.WithVmSize {
    }

    /**
     * Grouping of Pool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the pool update allowing to specify ApplicationLicenses.
         */
        interface WithApplicationLicenses {
            /**
             * Specifies applicationLicenses.
             */
            Update withApplicationLicenses(List<String> applicationLicenses);
        }

        /**
         * The stage of the pool update allowing to specify ApplicationPackages.
         */
        interface WithApplicationPackages {
            /**
             * Specifies applicationPackages.
             */
            Update withApplicationPackages(List<ApplicationPackageReference> applicationPackages);
        }

        /**
         * The stage of the pool update allowing to specify Certificates.
         */
        interface WithCertificates {
            /**
             * Specifies certificates.
             */
            Update withCertificates(List<CertificateReference> certificates);
        }

        /**
         * The stage of the pool update allowing to specify DeploymentConfiguration.
         */
        interface WithDeploymentConfiguration {
            /**
             * Specifies deploymentConfiguration.
             */
            Update withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration);
        }

        /**
         * The stage of the pool update allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             */
            Update withDisplayName(String displayName);
        }

        /**
         * The stage of the pool update allowing to specify InterNodeCommunication.
         */
        interface WithInterNodeCommunication {
            /**
             * Specifies interNodeCommunication.
             */
            Update withInterNodeCommunication(InterNodeCommunicationState interNodeCommunication);
        }

        /**
         * The stage of the pool update allowing to specify MaxTasksPerNode.
         */
        interface WithMaxTasksPerNode {
            /**
             * Specifies maxTasksPerNode.
             */
            Update withMaxTasksPerNode(Integer maxTasksPerNode);
        }

        /**
         * The stage of the pool update allowing to specify Metadata.
         */
        interface WithMetadata {
            /**
             * Specifies metadata.
             */
            Update withMetadata(List<MetadataItem> metadata);
        }

        /**
         * The stage of the pool update allowing to specify NetworkConfiguration.
         */
        interface WithNetworkConfiguration {
            /**
             * Specifies networkConfiguration.
             */
            Update withNetworkConfiguration(NetworkConfiguration networkConfiguration);
        }

        /**
         * The stage of the pool update allowing to specify ScaleSettings.
         */
        interface WithScaleSettings {
            /**
             * Specifies scaleSettings.
             */
            Update withScaleSettings(ScaleSettings scaleSettings);
        }

        /**
         * The stage of the pool update allowing to specify StartTask.
         */
        interface WithStartTask {
            /**
             * Specifies startTask.
             */
            Update withStartTask(StartTask startTask);
        }

        /**
         * The stage of the pool update allowing to specify TaskSchedulingPolicy.
         */
        interface WithTaskSchedulingPolicy {
            /**
             * Specifies taskSchedulingPolicy.
             */
            Update withTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy);
        }

        /**
         * The stage of the pool update allowing to specify UserAccounts.
         */
        interface WithUserAccounts {
            /**
             * Specifies userAccounts.
             */
            Update withUserAccounts(List<UserAccount> userAccounts);
        }

        /**
         * The stage of the pool update allowing to specify VmSize.
         */
        interface WithVmSize {
            /**
             * Specifies vmSize.
             */
            Update withVmSize(String vmSize);
        }

    }
}
