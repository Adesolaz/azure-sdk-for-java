/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.compute.v2017_03_30.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.compute.v2017_03_30.AvailabilitySetVmSizes;
import com.microsoft.azure.management.compute.v2017_03_30.TypeArtifacttypePublisherLocationVersions;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineExtensions;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineVmSizes;
import com.microsoft.azure.management.compute.v2017_03_30.OfferArtifacttypePublisherLocationVersions;
import com.microsoft.azure.management.compute.v2017_03_30.LocationPublishersOperations;
import com.microsoft.azure.management.compute.v2017_03_30.Usages;
import com.microsoft.azure.management.compute.v2017_03_30.LocationVmSizes;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineScaleSetSkus;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineScaleSetExtensions;
import com.microsoft.azure.management.compute.v2017_03_30.Virtualmachines;
import com.microsoft.azure.management.compute.v2017_03_30.RunCommands;
import com.microsoft.azure.management.compute.v2017_03_30.Types;
import com.microsoft.azure.management.compute.v2017_03_30.PublisherLocationArtifacttypes;
import com.microsoft.azure.management.compute.v2017_03_30.LocationPublishers;
import com.microsoft.azure.management.compute.v2017_03_30.Locations;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineExtensionsOperations;
import com.microsoft.azure.management.compute.v2017_03_30.Offers;
import com.microsoft.azure.management.compute.v2017_03_30.PublisherLocationArtifacttypesOperations;
import com.microsoft.azure.management.compute.v2017_03_30.LocationsOperations;
import com.microsoft.azure.management.compute.v2017_03_30.LocationsOperations1;
import com.microsoft.azure.management.compute.v2017_03_30.LocationsOperations2;
import com.microsoft.azure.management.compute.v2017_03_30.ResourceSkus;
import com.microsoft.azure.management.compute.v2017_03_30.RollingUpgrades;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineScaleSetsOperations;
import com.microsoft.azure.management.compute.v2017_03_30.LocationsOperations3;
import com.microsoft.azure.management.compute.v2017_03_30.AvailabilitySets;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachines;
import com.microsoft.azure.management.compute.v2017_03_30.Images;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineScaleSets;
import com.microsoft.azure.management.compute.v2017_03_30.Disks;
import com.microsoft.azure.management.compute.v2017_03_30.Snapshots;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Compute resource management.
 */
public final class ComputeManager extends ManagerCore<ComputeManager, ComputeManagementClientImpl> {
    private AvailabilitySetVmSizes availabilitySetVmSizes;
    private TypeArtifacttypePublisherLocationVersions typeArtifacttypePublisherLocationVersions;
    private VirtualMachineExtensions virtualMachineExtensions;
    private VirtualMachineVmSizes virtualMachineVmSizes;
    private OfferArtifacttypePublisherLocationVersions offerArtifacttypePublisherLocationVersions;
    private LocationPublishersOperations locationPublishersOperations;
    private Usages usages;
    private LocationVmSizes locationVmSizes;
    private VirtualMachineScaleSetSkus virtualMachineScaleSetSkus;
    private VirtualMachineScaleSetExtensions virtualMachineScaleSetExtensions;
    private Virtualmachines virtualmachines;
    private RunCommands runCommands;
    private Types types;
    private PublisherLocationArtifacttypes publisherLocationArtifacttypes;
    private LocationPublishers locationPublishers;
    private Locations locations;
    private VirtualMachineExtensionsOperations virtualMachineExtensionsOperations;
    private Offers offers;
    private PublisherLocationArtifacttypesOperations publisherLocationArtifacttypesOperations;
    private LocationsOperations locationsOperations;
    private LocationsOperations1 locationsOperations1;
    private LocationsOperations2 locationsOperations2;
    private ResourceSkus resourceSkus;
    private RollingUpgrades rollingUpgrades;
    private VirtualMachineScaleSetsOperations virtualMachineScaleSetsOperations;
    private LocationsOperations3 locationsOperations3;
    private AvailabilitySets availabilitySets;
    private VirtualMachines virtualMachines;
    private Images images;
    private VirtualMachineScaleSets virtualMachineScaleSets;
    private Disks disks;
    private Snapshots snapshots;
    /**
    * Get a Configurable instance that can be used to create ComputeManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new ComputeManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of ComputeManager that exposes Compute resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the ComputeManager
    */
    public static ComputeManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new ComputeManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of ComputeManager that exposes Compute resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the ComputeManager
    */
    public static ComputeManager authenticate(RestClient restClient, String subscriptionId) {
        return new ComputeManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of ComputeManager that exposes Compute management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Compute management API entry points that work across subscriptions
        */
        ComputeManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage AvailabilitySetVmSizes.
     */
    public AvailabilitySetVmSizes availabilitySetVmSizes() {
        if (this.availabilitySetVmSizes == null) {
            this.availabilitySetVmSizes = new AvailabilitySetVmSizesImpl(this);
        }
        return this.availabilitySetVmSizes;
    }

    /**
     * @return Entry point to manage TypeArtifacttypePublisherLocationVersions.
     */
    public TypeArtifacttypePublisherLocationVersions typeArtifacttypePublisherLocationVersions() {
        if (this.typeArtifacttypePublisherLocationVersions == null) {
            this.typeArtifacttypePublisherLocationVersions = new TypeArtifacttypePublisherLocationVersionsImpl(this);
        }
        return this.typeArtifacttypePublisherLocationVersions;
    }

    /**
     * @return Entry point to manage VirtualMachineExtensions.
     */
    public VirtualMachineExtensions virtualMachineExtensions() {
        if (this.virtualMachineExtensions == null) {
            this.virtualMachineExtensions = new VirtualMachineExtensionsImpl(this);
        }
        return this.virtualMachineExtensions;
    }

    /**
     * @return Entry point to manage VirtualMachineVmSizes.
     */
    public VirtualMachineVmSizes virtualMachineVmSizes() {
        if (this.virtualMachineVmSizes == null) {
            this.virtualMachineVmSizes = new VirtualMachineVmSizesImpl(this);
        }
        return this.virtualMachineVmSizes;
    }

    /**
     * @return Entry point to manage OfferArtifacttypePublisherLocationVersions.
     */
    public OfferArtifacttypePublisherLocationVersions offerArtifacttypePublisherLocationVersions() {
        if (this.offerArtifacttypePublisherLocationVersions == null) {
            this.offerArtifacttypePublisherLocationVersions = new OfferArtifacttypePublisherLocationVersionsImpl(this);
        }
        return this.offerArtifacttypePublisherLocationVersions;
    }

    /**
     * @return Entry point to manage LocationPublishersOperations.
     */
    public LocationPublishersOperations locationPublishersOperations() {
        if (this.locationPublishersOperations == null) {
            this.locationPublishersOperations = new LocationPublishersOperationsImpl(this);
        }
        return this.locationPublishersOperations;
    }

    /**
     * @return Entry point to manage Usages.
     */
    public Usages usages() {
        if (this.usages == null) {
            this.usages = new UsagesImpl(this);
        }
        return this.usages;
    }

    /**
     * @return Entry point to manage LocationVmSizes.
     */
    public LocationVmSizes locationVmSizes() {
        if (this.locationVmSizes == null) {
            this.locationVmSizes = new LocationVmSizesImpl(this);
        }
        return this.locationVmSizes;
    }

    /**
     * @return Entry point to manage VirtualMachineScaleSetSkus.
     */
    public VirtualMachineScaleSetSkus virtualMachineScaleSetSkus() {
        if (this.virtualMachineScaleSetSkus == null) {
            this.virtualMachineScaleSetSkus = new VirtualMachineScaleSetSkusImpl(this);
        }
        return this.virtualMachineScaleSetSkus;
    }

    /**
     * @return Entry point to manage VirtualMachineScaleSetExtensions.
     */
    public VirtualMachineScaleSetExtensions virtualMachineScaleSetExtensions() {
        if (this.virtualMachineScaleSetExtensions == null) {
            this.virtualMachineScaleSetExtensions = new VirtualMachineScaleSetExtensionsImpl(this);
        }
        return this.virtualMachineScaleSetExtensions;
    }

    /**
     * @return Entry point to manage Virtualmachines.
     */
    public Virtualmachines virtualmachines() {
        if (this.virtualmachines == null) {
            this.virtualmachines = new VirtualmachinesImpl(this);
        }
        return this.virtualmachines;
    }

    /**
     * @return Entry point to manage RunCommands.
     */
    public RunCommands runCommands() {
        if (this.runCommands == null) {
            this.runCommands = new RunCommandsImpl(this);
        }
        return this.runCommands;
    }

    /**
     * @return Entry point to manage Types.
     */
    public Types types() {
        if (this.types == null) {
            this.types = new TypesImpl(this);
        }
        return this.types;
    }

    /**
     * @return Entry point to manage PublisherLocationArtifacttypes.
     */
    public PublisherLocationArtifacttypes publisherLocationArtifacttypes() {
        if (this.publisherLocationArtifacttypes == null) {
            this.publisherLocationArtifacttypes = new PublisherLocationArtifacttypesImpl(this);
        }
        return this.publisherLocationArtifacttypes;
    }

    /**
     * @return Entry point to manage LocationPublishers.
     */
    public LocationPublishers locationPublishers() {
        if (this.locationPublishers == null) {
            this.locationPublishers = new LocationPublishersImpl(this);
        }
        return this.locationPublishers;
    }

    /**
     * @return Entry point to manage Locations.
     */
    public Locations locations() {
        if (this.locations == null) {
            this.locations = new LocationsImpl(this);
        }
        return this.locations;
    }

    /**
     * @return Entry point to manage VirtualMachineExtensionsOperations.
     */
    public VirtualMachineExtensionsOperations virtualMachineExtensionsOperations() {
        if (this.virtualMachineExtensionsOperations == null) {
            this.virtualMachineExtensionsOperations = new VirtualMachineExtensionsOperationsImpl(this);
        }
        return this.virtualMachineExtensionsOperations;
    }

    /**
     * @return Entry point to manage Offers.
     */
    public Offers offers() {
        if (this.offers == null) {
            this.offers = new OffersImpl(this);
        }
        return this.offers;
    }

    /**
     * @return Entry point to manage PublisherLocationArtifacttypesOperations.
     */
    public PublisherLocationArtifacttypesOperations publisherLocationArtifacttypesOperations() {
        if (this.publisherLocationArtifacttypesOperations == null) {
            this.publisherLocationArtifacttypesOperations = new PublisherLocationArtifacttypesOperationsImpl(this);
        }
        return this.publisherLocationArtifacttypesOperations;
    }

    /**
     * @return Entry point to manage LocationsOperations.
     */
    public LocationsOperations locationsOperations() {
        if (this.locationsOperations == null) {
            this.locationsOperations = new LocationsOperationsImpl(this);
        }
        return this.locationsOperations;
    }

    /**
     * @return Entry point to manage LocationsOperations1.
     */
    public LocationsOperations1 locationsOperations1() {
        if (this.locationsOperations1 == null) {
            this.locationsOperations1 = new LocationsOperations1Impl(this);
        }
        return this.locationsOperations1;
    }

    /**
     * @return Entry point to manage LocationsOperations2.
     */
    public LocationsOperations2 locationsOperations2() {
        if (this.locationsOperations2 == null) {
            this.locationsOperations2 = new LocationsOperations2Impl(this);
        }
        return this.locationsOperations2;
    }

    /**
     * @return Entry point to manage ResourceSkus.
     */
    public ResourceSkus resourceSkus() {
        if (this.resourceSkus == null) {
            this.resourceSkus = new ResourceSkusImpl(this);
        }
        return this.resourceSkus;
    }

    /**
     * @return Entry point to manage RollingUpgrades.
     */
    public RollingUpgrades rollingUpgrades() {
        if (this.rollingUpgrades == null) {
            this.rollingUpgrades = new RollingUpgradesImpl(this);
        }
        return this.rollingUpgrades;
    }

    /**
     * @return Entry point to manage VirtualMachineScaleSetsOperations.
     */
    public VirtualMachineScaleSetsOperations virtualMachineScaleSetsOperations() {
        if (this.virtualMachineScaleSetsOperations == null) {
            this.virtualMachineScaleSetsOperations = new VirtualMachineScaleSetsOperationsImpl(this);
        }
        return this.virtualMachineScaleSetsOperations;
    }

    /**
     * @return Entry point to manage LocationsOperations3.
     */
    public LocationsOperations3 locationsOperations3() {
        if (this.locationsOperations3 == null) {
            this.locationsOperations3 = new LocationsOperations3Impl(this);
        }
        return this.locationsOperations3;
    }

    /**
     * @return Entry point to manage AvailabilitySets.
     */
    public AvailabilitySets availabilitySets() {
        if (this.availabilitySets == null) {
            this.availabilitySets = new AvailabilitySetsImpl(this);
        }
        return this.availabilitySets;
    }

    /**
     * @return Entry point to manage VirtualMachines.
     */
    public VirtualMachines virtualMachines() {
        if (this.virtualMachines == null) {
            this.virtualMachines = new VirtualMachinesImpl(this);
        }
        return this.virtualMachines;
    }

    /**
     * @return Entry point to manage Images.
     */
    public Images images() {
        if (this.images == null) {
            this.images = new ImagesImpl(this);
        }
        return this.images;
    }

    /**
     * @return Entry point to manage VirtualMachineScaleSets.
     */
    public VirtualMachineScaleSets virtualMachineScaleSets() {
        if (this.virtualMachineScaleSets == null) {
            this.virtualMachineScaleSets = new VirtualMachineScaleSetsImpl(this);
        }
        return this.virtualMachineScaleSets;
    }

    /**
     * @return Entry point to manage Disks.
     */
    public Disks disks() {
        if (this.disks == null) {
            this.disks = new DisksImpl(this);
        }
        return this.disks;
    }

    /**
     * @return Entry point to manage Snapshots.
     */
    public Snapshots snapshots() {
        if (this.snapshots == null) {
            this.snapshots = new SnapshotsImpl(this);
        }
        return this.snapshots;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public ComputeManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return ComputeManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private ComputeManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new ComputeManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
