/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.compute.v2017_03_30.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2017_03_30.OfferArtifacttypePublisherLocationVersions;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.compute.v2017_03_30.VirtualMachineImage;

class OfferArtifacttypePublisherLocationVersionsImpl extends WrapperImpl<VirtualMachineImagesInner> implements OfferArtifacttypePublisherLocationVersions {
    private final ComputeManager manager;

    OfferArtifacttypePublisherLocationVersionsImpl(ComputeManager manager) {
        super(manager.inner().virtualMachineImages());
        this.manager = manager;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    private VirtualMachineImageImpl wrapModel(VirtualMachineImageInner inner) {
        return  new VirtualMachineImageImpl(inner, manager());
    }

    @Override
    public Observable<VirtualMachineImage> listBySkusAsync(String location, String publisherName, String offer, String skus) {
        VirtualMachineImagesInner client = this.inner();
        return client.listAsync(location, publisherName, offer, skus)
        .flatMap(new Func1<List<VirtualMachineImageInner>, Observable<VirtualMachineImageInner>>() {
            @Override
            public Observable<VirtualMachineImageInner> call(List<VirtualMachineImageInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VirtualMachineImageInner, VirtualMachineImage>() {
            @Override
            public VirtualMachineImage call(VirtualMachineImageInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<VirtualMachineImage> getBySkusAsync(String location, String publisherName, String offer, String skus, String version) {
        VirtualMachineImagesInner client = this.inner();
        return client.getAsync(location, publisherName, offer, skus, version)
        .map(new Func1<VirtualMachineImageInner, VirtualMachineImage>() {
            @Override
            public VirtualMachineImage call(VirtualMachineImageInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
