/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.compute.v2017_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.compute.v2017_12_01.Offers;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.compute.v2017_12_01.VirtualMachineImageResource;
import com.microsoft.azure.management.compute.v2017_12_01.LocationSkus;

class OffersImpl extends WrapperImpl<VirtualMachineImagesInner> implements Offers {
    private final ComputeManager manager;

    OffersImpl(ComputeManager manager) {
        super(manager.inner().virtualMachineImages());
        this.manager = manager;
    }

    @Override
    public LocationSkus skus() {
        LocationSkus accessor = this.manager().locationSkus();
        return accessor;
    }

    public ComputeManager manager() {
        return this.manager;
    }

    @Override
    public Observable<VirtualMachineImageResource> listOffersAsync(String location, String publisherName) {
        VirtualMachineImagesInner client = this.inner();
        return client.listOffersAsync(location, publisherName)
        .flatMap(new Func1<List<VirtualMachineImageResourceInner>, Observable<VirtualMachineImageResourceInner>>() {
            @Override
            public Observable<VirtualMachineImageResourceInner> call(List<VirtualMachineImageResourceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VirtualMachineImageResourceInner, VirtualMachineImageResource>() {
            @Override
            public VirtualMachineImageResource call(VirtualMachineImageResourceInner inner) {
                return new VirtualMachineImageResourceImpl(inner, manager());
            }
        });
    }

}
