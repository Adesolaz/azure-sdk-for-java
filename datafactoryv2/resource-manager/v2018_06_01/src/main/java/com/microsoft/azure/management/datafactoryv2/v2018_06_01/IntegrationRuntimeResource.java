/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactoryv2.v2018_06_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.datafactoryv2.v2018_06_01.implementation.IntegrationRuntimeResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.datafactoryv2.v2018_06_01.implementation.DataFactoryManager;
import com.microsoft.azure.management.datafactoryv2.v2018_06_01.implementation.IntegrationRuntimeInner;
import java.util.Map;

/**
 * Type representing IntegrationRuntimeResource.
 */
public interface IntegrationRuntimeResource extends HasInner<IntegrationRuntimeResourceInner>, Indexable, Refreshable<IntegrationRuntimeResource>, Updatable<IntegrationRuntimeResource.Update>, HasManager<DataFactoryManager> {
    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the properties value.
     */
    IntegrationRuntimeInner properties();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the IntegrationRuntimeResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithFactory, DefinitionStages.WithProperties, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of IntegrationRuntimeResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a IntegrationRuntimeResource definition.
         */
        interface Blank extends WithFactory {
        }

        /**
         * The stage of the integrationruntimeresource definition allowing to specify Factory.
         */
        interface WithFactory {
           /**
            * Specifies resourceGroupName, factoryName.
            */
            WithProperties withExistingFactory(String resourceGroupName, String factoryName);
        }

        /**
         * The stage of the integrationruntimeresource definition allowing to specify Properties.
         */
        interface WithProperties {
           /**
            * Specifies properties.
            */
            WithCreate withProperties(IntegrationRuntimeInner properties);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<IntegrationRuntimeResource> {
        }
    }
    /**
     * The template for a IntegrationRuntimeResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<IntegrationRuntimeResource>, UpdateStages.WithAutoUpdate, UpdateStages.WithUpdateDelayOffset {
    }

    /**
     * Grouping of IntegrationRuntimeResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the integrationruntimeresource update allowing to specify AutoUpdate.
         */
        interface WithAutoUpdate {
            /**
             * Specifies autoUpdate.
             */
            Update withAutoUpdate(IntegrationRuntimeAutoUpdate autoUpdate);
        }

        /**
         * The stage of the integrationruntimeresource update allowing to specify UpdateDelayOffset.
         */
        interface WithUpdateDelayOffset {
            /**
             * Specifies updateDelayOffset.
             */
            Update withUpdateDelayOffset(String updateDelayOffset);
        }

    }
}
