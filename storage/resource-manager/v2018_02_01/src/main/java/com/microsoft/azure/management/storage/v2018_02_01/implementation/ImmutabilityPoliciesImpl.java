/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.storage.v2018_02_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.storage.v2018_02_01.ImmutabilityPolicies;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.storage.v2018_02_01.ImmutabilityPolicy;

class ImmutabilityPoliciesImpl extends WrapperImpl<BlobContainersInner> implements ImmutabilityPolicies {
    private final StorageManager manager;

    ImmutabilityPoliciesImpl(StorageManager manager) {
        super(manager.inner().blobContainers());
        this.manager = manager;
    }

    public StorageManager manager() {
        return this.manager;
    }

    @Override
    public ImmutabilityPolicyImpl define(String name) {
        return new ImmutabilityPolicyImpl(name, this.manager());
    }

    private ImmutabilityPolicyImpl wrapModel(ImmutabilityPolicyInner inner) {
        return  new ImmutabilityPolicyImpl(inner, manager());
    }

    @Override
    public Observable<ImmutabilityPolicy> lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String ifMatch) {
        BlobContainersInner client = this.inner();
        return client.lockImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch)
        .map(new Func1<ImmutabilityPolicyInner, ImmutabilityPolicy>() {
            @Override
            public ImmutabilityPolicy call(ImmutabilityPolicyInner inner) {
                return new ImmutabilityPolicyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ImmutabilityPolicy> extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String ifMatch, int immutabilityPeriodSinceCreationInDays) {
        BlobContainersInner client = this.inner();
        return client.extendImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays)
        .map(new Func1<ImmutabilityPolicyInner, ImmutabilityPolicy>() {
            @Override
            public ImmutabilityPolicy call(ImmutabilityPolicyInner inner) {
                return new ImmutabilityPolicyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ImmutabilityPolicy> getByContainerAsync(String resourceGroupName, String accountName, String containerName) {
        BlobContainersInner client = this.inner();
        return client.getImmutabilityPolicyAsync(resourceGroupName, accountName, containerName)
        .map(new Func1<ImmutabilityPolicyInner, ImmutabilityPolicy>() {
            @Override
            public ImmutabilityPolicy call(ImmutabilityPolicyInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteByContainerAsync(String resourceGroupName, String accountName, String containerName, String ifMatch) {
        BlobContainersInner client = this.inner();
        return client.deleteImmutabilityPolicyAsync(resourceGroupName, accountName, containerName, ifMatch).toCompletable();
    }

}
