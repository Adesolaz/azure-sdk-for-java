/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.v2018_07_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.mediaservices.v2018_07_01.ApiErrorException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AccountFilters.
 */
public class AccountFiltersInner {
    /** The Retrofit service to perform REST calls. */
    private AccountFiltersService service;
    /** The service client containing this operation class. */
    private AzureMediaServicesImpl client;

    /**
     * Initializes an instance of AccountFiltersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AccountFiltersInner(Retrofit retrofit, AzureMediaServicesImpl client) {
        this.service = retrofit.create(AccountFiltersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AccountFilters to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AccountFiltersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2018_07_01.AccountFilters list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2018_07_01.AccountFilters get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("filterName") String filterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2018_07_01.AccountFilters createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("filterName") String filterName, @Body AccountFilterInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2018_07_01.AccountFilters delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("filterName") String filterName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mediaservices.v2018_07_01.AccountFilters update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("filterName") String filterName, @Body AccountFilterInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List Account Filters.
     * List Account Filters in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountFilterCollectionInner object if successful.
     */
    public AccountFilterCollectionInner list(String resourceGroupName, String accountName) {
        return listWithServiceResponseAsync(resourceGroupName, accountName).toBlocking().single().body();
    }

    /**
     * List Account Filters.
     * List Account Filters in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountFilterCollectionInner> listAsync(String resourceGroupName, String accountName, final ServiceCallback<AccountFilterCollectionInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(resourceGroupName, accountName), serviceCallback);
    }

    /**
     * List Account Filters.
     * List Account Filters in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterCollectionInner object
     */
    public Observable<AccountFilterCollectionInner> listAsync(String resourceGroupName, String accountName) {
        return listWithServiceResponseAsync(resourceGroupName, accountName).map(new Func1<ServiceResponse<AccountFilterCollectionInner>, AccountFilterCollectionInner>() {
            @Override
            public AccountFilterCollectionInner call(ServiceResponse<AccountFilterCollectionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List Account Filters.
     * List Account Filters in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterCollectionInner object
     */
    public Observable<ServiceResponse<AccountFilterCollectionInner>> listWithServiceResponseAsync(String resourceGroupName, String accountName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, accountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountFilterCollectionInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountFilterCollectionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountFilterCollectionInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountFilterCollectionInner> listDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountFilterCollectionInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountFilterCollectionInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get an Account Filter.
     * Get the details of an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountFilterInner object if successful.
     */
    public AccountFilterInner get(String resourceGroupName, String accountName, String filterName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, filterName).toBlocking().single().body();
    }

    /**
     * Get an Account Filter.
     * Get the details of an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountFilterInner> getAsync(String resourceGroupName, String accountName, String filterName, final ServiceCallback<AccountFilterInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, accountName, filterName), serviceCallback);
    }

    /**
     * Get an Account Filter.
     * Get the details of an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterInner object
     */
    public Observable<AccountFilterInner> getAsync(String resourceGroupName, String accountName, String filterName) {
        return getWithServiceResponseAsync(resourceGroupName, accountName, filterName).map(new Func1<ServiceResponse<AccountFilterInner>, AccountFilterInner>() {
            @Override
            public AccountFilterInner call(ServiceResponse<AccountFilterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get an Account Filter.
     * Get the details of an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterInner object
     */
    public Observable<ServiceResponse<AccountFilterInner>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String filterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (filterName == null) {
            throw new IllegalArgumentException("Parameter filterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, accountName, filterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountFilterInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountFilterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountFilterInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountFilterInner> getDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountFilterInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountFilterInner>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Create or update an Account Filter.
     * Creates or updates an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountFilterInner object if successful.
     */
    public AccountFilterInner createOrUpdate(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, filterName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update an Account Filter.
     * Creates or updates an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountFilterInner> createOrUpdateAsync(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters, final ServiceCallback<AccountFilterInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, filterName, parameters), serviceCallback);
    }

    /**
     * Create or update an Account Filter.
     * Creates or updates an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterInner object
     */
    public Observable<AccountFilterInner> createOrUpdateAsync(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, filterName, parameters).map(new Func1<ServiceResponse<AccountFilterInner>, AccountFilterInner>() {
            @Override
            public AccountFilterInner call(ServiceResponse<AccountFilterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an Account Filter.
     * Creates or updates an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterInner object
     */
    public Observable<ServiceResponse<AccountFilterInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (filterName == null) {
            throw new IllegalArgumentException("Parameter filterName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, accountName, filterName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountFilterInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountFilterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountFilterInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountFilterInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountFilterInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountFilterInner>() { }.getType())
                .register(201, new TypeToken<AccountFilterInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Delete an Account Filter.
     * Deletes an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String accountName, String filterName) {
        deleteWithServiceResponseAsync(resourceGroupName, accountName, filterName).toBlocking().single().body();
    }

    /**
     * Delete an Account Filter.
     * Deletes an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String filterName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, accountName, filterName), serviceCallback);
    }

    /**
     * Delete an Account Filter.
     * Deletes an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String filterName) {
        return deleteWithServiceResponseAsync(resourceGroupName, accountName, filterName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an Account Filter.
     * Deletes an Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String filterName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (filterName == null) {
            throw new IllegalArgumentException("Parameter filterName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, accountName, filterName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Update an Account Filter.
     * Updates an existing Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountFilterInner object if successful.
     */
    public AccountFilterInner update(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, filterName, parameters).toBlocking().single().body();
    }

    /**
     * Update an Account Filter.
     * Updates an existing Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountFilterInner> updateAsync(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters, final ServiceCallback<AccountFilterInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, accountName, filterName, parameters), serviceCallback);
    }

    /**
     * Update an Account Filter.
     * Updates an existing Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterInner object
     */
    public Observable<AccountFilterInner> updateAsync(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, accountName, filterName, parameters).map(new Func1<ServiceResponse<AccountFilterInner>, AccountFilterInner>() {
            @Override
            public AccountFilterInner call(ServiceResponse<AccountFilterInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an Account Filter.
     * Updates an existing Account Filter in the Media Services account.
     *
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountFilterInner object
     */
    public Observable<ServiceResponse<AccountFilterInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String filterName, AccountFilterInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (filterName == null) {
            throw new IllegalArgumentException("Parameter filterName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(this.client.subscriptionId(), resourceGroupName, accountName, filterName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountFilterInner>>>() {
                @Override
                public Observable<ServiceResponse<AccountFilterInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountFilterInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountFilterInner> updateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountFilterInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountFilterInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
