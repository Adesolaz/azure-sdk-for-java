/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargePersonGroup;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargePersonGroups.
 */
public interface LargePersonGroups {
    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String largePersonGroupId);

    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> createAsync(String largePersonGroupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> createAsync(String largePersonGroupId);

    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largePersonGroupId);
    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String largePersonGroupId, String name, String userData);

    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> createAsync(String largePersonGroupId, String name, String userData, final ServiceCallback<Void> serviceCallback);

    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> createAsync(String largePersonGroupId, String name, String userData);

    /**
     * Create a new large person group with specified largePersonGroupId, name and user-provided userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largePersonGroupId, String name, String userData);

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String largePersonGroupId);

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String largePersonGroupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String largePersonGroupId);

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person group will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String largePersonGroupId);

    /**
     * Retrieve the information of a large person group, including its name and userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargePersonGroup object if successful.
     */
    LargePersonGroup get(String largePersonGroupId);

    /**
     * Retrieve the information of a large person group, including its name and userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<LargePersonGroup> getAsync(String largePersonGroupId, final ServiceCallback<LargePersonGroup> serviceCallback);

    /**
     * Retrieve the information of a large person group, including its name and userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargePersonGroup object
     */
    Observable<LargePersonGroup> getAsync(String largePersonGroupId);

    /**
     * Retrieve the information of a large person group, including its name and userData.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargePersonGroup object
     */
    Observable<ServiceResponse<LargePersonGroup>> getWithServiceResponseAsync(String largePersonGroupId);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String largePersonGroupId);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateAsync(String largePersonGroupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateAsync(String largePersonGroupId);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largePersonGroupId);
    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String largePersonGroupId, String name, String userData);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateAsync(String largePersonGroupId, String name, String userData, final ServiceCallback<Void> serviceCallback);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateAsync(String largePersonGroupId, String name, String userData);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largePersonGroupId, String name, String userData);

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    TrainingStatus getTrainingStatus(String largePersonGroupId);

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrainingStatus> getTrainingStatusAsync(String largePersonGroupId, final ServiceCallback<TrainingStatus> serviceCallback);

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<TrainingStatus> getTrainingStatusAsync(String largePersonGroupId);

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<ServiceResponse<TrainingStatus>> getTrainingStatusWithServiceResponseAsync(String largePersonGroupId);

    /**
     * List large person groups and their information.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargePersonGroup&gt; object if successful.
     */
    List<LargePersonGroup> list();

    /**
     * List large person groups and their information.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<LargePersonGroup>> listAsync(final ServiceCallback<List<LargePersonGroup>> serviceCallback);

    /**
     * List large person groups and their information.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargePersonGroup&gt; object
     */
    Observable<List<LargePersonGroup>> listAsync();

    /**
     * List large person groups and their information.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargePersonGroup&gt; object
     */
    Observable<ServiceResponse<List<LargePersonGroup>>> listWithServiceResponseAsync();
    /**
     * List large person groups and their information.
     *
     * @param start List large person groups from the least largePersonGroupId greater than the "start".
     * @param top The number of large person groups to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargePersonGroup&gt; object if successful.
     */
    List<LargePersonGroup> list(String start, Integer top);

    /**
     * List large person groups and their information.
     *
     * @param start List large person groups from the least largePersonGroupId greater than the "start".
     * @param top The number of large person groups to list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<LargePersonGroup>> listAsync(String start, Integer top, final ServiceCallback<List<LargePersonGroup>> serviceCallback);

    /**
     * List large person groups and their information.
     *
     * @param start List large person groups from the least largePersonGroupId greater than the "start".
     * @param top The number of large person groups to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargePersonGroup&gt; object
     */
    Observable<List<LargePersonGroup>> listAsync(String start, Integer top);

    /**
     * List large person groups and their information.
     *
     * @param start List large person groups from the least largePersonGroupId greater than the "start".
     * @param top The number of large person groups to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargePersonGroup&gt; object
     */
    Observable<ServiceResponse<List<LargePersonGroup>>> listWithServiceResponseAsync(String start, Integer top);

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void train(String largePersonGroupId);

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> trainAsync(String largePersonGroupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> trainAsync(String largePersonGroupId);

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String largePersonGroupId);

}
